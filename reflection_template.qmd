---
title: "STAT 331 Portfolio"
author: "Siddharth Venkiteswaran"
format: 
  html: 
    self-contained: true
layout: margin-left
editor: visual
execute: 
  eval: false
  echo: true
---

[**My Grade:**]{.underline} I believe my grade equivalent to course work evidenced below to be an \_\_.

[**Learning Objective Evidence:**]{.underline} In the code chunks below, provide code from Lab or Challenge assignments where you believe you have demonstrated proficiency with the specified learning target. Be sure to specify **where** the code came from (e.g., Lab 4 Question 2).

## Working with Data

**WD-1: I can import data from a *variety* of formats (e.g., csv, xlsx, txt, etc.).**

-   `csv`

```{r}
#| label: wd-1-csv
## This line of code came from Lab 2 Question 1
surveys <- read_csv(file = here::here("data", 
                                      "surveys.csv"), 
                    show_col_types = FALSE)
```

-   `xlsx`

```{r}
#| label: wd-1-xlsx
## This line of code came from Practice Activity 4 Question 3
military <- read_xlsx(here::here("data", 
                                 "gov_spending_per_capita.xlsx"), 
                      sheet = "Share of Govt. spending", 
                      skip  = 7, 
                      n_max = 190, 
                      na = c(". .", 
                             "xxx")
                      )
```

-   `txt`

```{r}
#| label: wd-1-txt
## This code came from Check-In 2.3 Question 4
ages_mystery <- read_delim(file = here::here("Week 2", 
                                             "Check-ins", 
                                             "Ages_Data", 
                                             "ages_mystery.txt"), 
                           delim = "|")
```

**WD-2: I can select necessary columns from a dataset.**

```{r}
#| label: wd-2
## This code came from Lab 3 Question 5
teacher_evals_clean <- teachers |> 
  select(course_id,
         teacher_id,
         question_no,
         no_participants,
         resp_share,
         SET_score_avg,
         percent_failed_cur,
         academic_degree,
         seniority,
         gender) |>
  rename(sex = gender) |>
  filter(no_participants >= 10) |> 
  mutate(teacher_id = as.character(teacher_id))
```

**WD-3: I can filter rows from a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   numeric

```{r}
#| label: wd-3-numeric
## This code came from Lab 3 Question 9
teacher_evals_clean |>
  group_by(course_id, teacher_id) |>
  summarise(questions_asked = n_distinct(question_no)) |> 
  filter(questions_asked == 9) |> 
  dim()
```

-   character -- specifically a string (example must use functions from **stringr**)

```{r}
#| label: wd-3-string
## This came from Lab 5 in the section "Finding a Suspect"
get_fit_now_member |>
  full_join(get_fit_now_check_in,
            by = join_by("id" == "membership_id")) |>
  filter(membership_status == "gold",
         str_detect(id, "48Z."),
         ymd(check_in_date) == "2018-01-09") |>
  inner_join(person,
            by = join_by("person_id" == "id")) |>
  inner_join(drivers_license,
             by = join_by("license_id" == "id")) |>
  pull(name.x)
```

-   factor

```{r}
#| label: wd-3-factor

```

-   date (example must use functions from **lubridate**)

```{r}
#| label: wd-3-date
get_fit_now_member |>
  full_join(get_fit_now_check_in,
            by = join_by("id" == "membership_id")) |>
  filter(membership_status == "gold",
         str_detect(id, "48Z."),
         ymd(check_in_date) == "2018-01-09") |>
  inner_join(person,
            by = join_by("person_id" == "id")) |>
  inner_join(drivers_license,
             by = join_by("license_id" == "id")) |>
  pull(name.x)
```

**WD-4: I can modify existing variables and create new variables in a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   numeric (using `as.numeric()` is not sufficient)

```{r}
#| label: wd-4-numeric

```

-   character -- specifically a string (example must use functions from **stringr**)

```{r}
#| label: wd-4-string

```

-   factor (example must use functions from **forcats**)

```{r}
#| label: wd-4-factor
## This code came from Lab 4 Question 3
ca_childcare <- ca_childcare |>
  mutate(region = fct_collapse(county_name,
                               "Superior California" = c("Butte County", "Colusa County", "El Dorado County", "Glenn County", "Lassen County", "Modoc County", "Nevada County", "Placer County", "Plumas County", "Sacramento County", "Shasta County", "Sierra County", "Siskiyou County", "Sutter County", "Tehama County", "Yolo County", "Yuba County"),
                               "North Coast" = c("Del Norte County", "Humboldt County", "Lake County", "Mendocino County", "Napa County", "Sonoma County", "Trinity County"),
                               "San Francisco Bay Area" = c("Alameda County", "Contra Costa County", "Marin County", "San Francisco County", "San Mateo County", "Santa Clara County", "Solano County"),
                               "Northern San Joaquin Valley" = c("Alpine County", "Amador County", "Calaveras County", "Madera County", "Mariposa County", "Merced County", "Mono County", "San Joaquin County", "Stanislaus County", "Tuolumne County"),
                               "Central Coast" = c("Monterey County", "San Benito County", "San Luis Obispo County", "Santa Barbara County", "Santa Cruz County", "Ventura County"),
                               "Southern San Joaquin Valley" = c("Fresno County", "Inyo County", "Kern County", "Kings County", "Tulare County"),
                               "Inland Empire" = c("Riverside County", "San Bernardino County"),
                               "Los Angeles County" = c("Los Angeles County"), 
                               "Orange County" = c("Orange County"), 
                               "San Diego - Imperial" = c("San Diego County", "Imperial County")))
```

-   date (example must use functions from **lubridate**)

```{r}
#| label: wd-4-date

```

**WD-5: I can use mutating joins to combine multiple dataframes.**

-   `left_join()`

```{r}
#| label: wd-5-left

```

-   `right_join()`

```{r}
#| label: wd-5-right

```

-   `inner_join()`

```{r}
#| label: wd-5-inner
## This code came from Lab 5 in the section "Finding a Suspect"
get_fit_now_member |>
  full_join(get_fit_now_check_in,
            by = join_by("id" == "membership_id")) |>
  filter(membership_status == "gold",
         str_detect(id, "48Z."),
         ymd(check_in_date) == "2018-01-09") |>
  inner_join(person,
            by = join_by("person_id" == "id")) |>
  inner_join(drivers_license,
             by = join_by("license_id" == "id")) |>
  pull(name.x)
```

-   `full_join()`

```{r}
#| label: wd-5-full
## This came from Lab 5 in the "Finding the Real Culprit" section
person |>
  full_join(drivers_license,
            by = join_by("license_id" == "id")) |>
  full_join(facebook_event_checkin,
            by = join_by("id" == "person_id")) |>
  full_join(income,
            by = join_by("ssn" == "ssn")) |>
  filter(height == c(65:67),
         hair_color == "red",
         car_make == "Tesla",
         car_model == "Model S",
         str_detect(event_name, "SQL Symphony")) |>
  pull(name)
```

**WD-6: I can use filtering joins to filter rows from a dataframe.**

-   `semi_join()`

```{r}
#| label: wd-6-semi

```

-   `anti_join()`

```{r}
#| label: wd-6-anti
## This code comes from Practice Activity 4 Question 4
military_clean <- anti_join(military, 
                            cont_region,
                            by = join_by(Country == Region))
```

**WD-7: I can pivot dataframes from long to wide and visa versa**

-   `pivot_longer()`

```{r}
#| label: wd-7-long
## This code comes from Lab 4 Question 6
ca_childcare |>
  pivot_longer(cols = mc_infant:mc_preschool,
               names_to = "childcare_level",
               values_to = "median_cost") |>
  ggplot(mapping = aes(
    x = study_year,
    y = median_cost,
    colour = region
  )) +
  geom_point() +
  geom_smooth() +
  facet_wrap(.~ childcare_level,
             nrow = 1,
             labeller = labeller(childcare_level = 
                                   c("mc_infant" = "Infant",
                                     "mc_preschool" = "Preschool",
                                     "mc_toddler" = "Toddler"))) + 
  scale_y_continuous(limits = c(100, 500)) +
  scale_x_continuous(breaks = seq(2008, 2018, by = 2)) +
  theme(axis.text.x = element_text(size = 6)) +
  labs(title = "Weekly Median Price for Center-Based Childcare ($)",
       x = "Study Year",
       y = NULL,
       color = "California Region")
```

-   `pivot_wider()`

```{r}
#| label: wd-7-wide
## This code comes from Lab 4 Question 4
ca_childcare |>
  filter(study_year == 2008 |
           study_year == 2018) |>
  group_by(region, study_year) |>
  summarise(median_income = median(mhi_2018)) |>
  pivot_wider(names_from = study_year, values_from = median_income) |>
  arrange(by = `2018`)
```

## Reproducibility

**R-1: I can create professional looking, reproducible analyses using RStudio projects, Quarto documents, and the here package.**

I've done this in the following provided assignments:
Lab 1, Lab 2, Lab 3, Lab 4, and Lab 5, as well as the respective challenges for those assignments

**R-2: I can write well documented and tidy code.**

-   Example of **ggplot2** plotting

```{r}
#| label: r-2-1
## This code comes from Lab 4 Question 7
ggplot(ca_childcare, aes(x = mhi_2018, 
                         y = mc_infant)) +
  geom_point() +
  geom_smooth(method = "lm",
              se = FALSE) +
  labs(title = "Median Household Income Compared to the Weekly Price for Infants in Childcare", 
       x = "Median Household Income ($ in 2018)",
       y = "Median Weekly Infant Care Cost ($)")
```

-   Example of **dplyr** pipeline

```{r}
#| label: r-2-2
## This code comes from Lab 4 Question 4
ca_childcare |>
  filter(study_year == 2008 |
           study_year == 2018) |>
  group_by(region, study_year) |>
  summarise(median_income = median(mhi_2018)) |>
  pivot_wider(names_from = study_year, values_from = median_income) |>
  arrange(by = `2018`)
```

-   Example of function formatting

```{r}
#| label: r-2-3

```

**R-3: I can write robust programs that are resistant to changes in inputs.**

-   Example -- any context

```{r}
#| label: r-3-example
## This code comes from Lab 3 Question 10
teacher_evals_clean |>
  filter(question_no == 901) |>
  group_by(teacher_id) |>
  summarise(mean_score = mean(SET_score_avg)) |>
  arrange(desc(mean_score)) |>
  slice(c(1, n()))
```

-   Example of function stops

```{r}
#| label: r-3-function-stops

```

## Data Visualization & Summarization

**DVS-1: I can create visualizations for a *variety* of variable types (e.g., numeric, character, factor, date)**

-   at least two numeric variables

```{r}
#| label: dvs-1-num
## This code comes from Lab 4 Question 7
ggplot(ca_childcare, aes(x = mhi_2018, 
                         y = mc_infant)) +
  geom_point() +
  geom_smooth(method = "lm",
              se = FALSE) +
  labs(title = "Median Household Income Compared to the Weekly Price for Infants in Childcare", 
       x = "Median Household Income ($ in 2018)",
       y = "Median Weekly Infant Care Cost ($)")
```

-   at least one numeric variable and one categorical variable

```{r}
#| label: dvs-2-num-cat
## This code comes from Lab 2 Question 8
ggplot(data = surveys,
       mapping = aes(
         x = species,
         y = weight
       )) + 
  geom_jitter(color = "steelblue", 
              alpha = 0.3) +
  geom_boxplot(fill = "red3", 
               outliers = FALSE) + 
  labs(title = "Boxplots of Species of Rodent by Their Weight", 
       x = "Rodent Species", 
       y = NULL, 
       subtitle = "Weight (g)") +
  theme(axis.text.x = element_text(angle = 45),
        axis.text.y = element_text(angle = 45))
```

-   at least two categorical variables

```{r}
#| label: dvs-2-cat
## This code comes from Lab 3 Question 2
ggplot(data = teacher_evals_compare,
       mapping = aes(
         x = sen_level,
         fill = SET_level
         )) +
  geom_bar() + 
  labs(x = "Seniority of Instructor",
       y = NULL,
       subtitle = "Number of Sections",
       fill = "SET Level") +
  theme_minimal() + 
  scale_fill_manual(values = c("Excellent" = "steelblue",
                               "Standard" = "orange"))
```

-   dates (timeseries plot)

```{r}
#| label: dvs-2-date

```

**DVS-2: I use plot modifications to make my visualization clear to the reader.**

-   I can ensure people don't tilt their head

```{r}
#| label: dvs-2-1
## This code comes from Challenge 2 Medium
ggplot(data = surveys, 
       mapping = aes(
         x = weight, 
         y = species, 
         group = species)) + 
  geom_jitter(color = "steelblue", 
              alpha = 0.3) + 
  geom_density_ridges(fill = "red") + 
  labs(title = "Density Plots of Species of Rodent by Their Weight", 
       x = "Weight (g)", 
       y = NULL, 
       subtitle = "Rodent Species") +
  theme(axis.text.x = element_text(angle = 45),
        axis.text.y = element_text(angle = 45))
```

-   I can modify the text in my plot to be more readable

```{r}
#| label: dvs-2-2
## This code came from Challenge 2 Medium
## Create the density plot
ggplot(data = surveys, 
       mapping = aes(
         x = weight, 
         y = species, 
         group = species)) + 
  geom_jitter(color = "steelblue", 
              alpha = 0.3) + 
  geom_density_ridges(fill = "red") + 
  labs(title = "Density Plots of Species of Rodent by Their Weight", 
       x = "Weight (g)", 
       y = NULL, 
       subtitle = "Rodent Species") +
  theme(axis.text.x = element_text(angle = 45),
        axis.text.y = element_text(angle = 45))
```

-   I can reorder my legend to align with the colors in my plot

```{r}
#| label: dvs-2-3
## This code comes from Lab 4 Question 6
ca_childcare |>
  pivot_longer(cols = mc_infant:mc_preschool,
               names_to = "childcare_level",
               values_to = "median_cost") |>
  ggplot(mapping = aes(
    x = study_year,
    y = median_cost,
    colour = region
  )) +
  geom_point() +
  geom_smooth() +
  facet_wrap(.~ childcare_level,
             nrow = 1,
             labeller = labeller(childcare_level = 
                                   c("mc_infant" = "Infant",
                                     "mc_preschool" = "Preschool",
                                     "mc_toddler" = "Toddler"))) + 
  scale_y_continuous(limits = c(100, 500)) +
  scale_x_continuous(breaks = seq(2008, 2018, by = 2)) +
  theme(axis.text.x = element_text(size = 6)) +
  labs(title = "Weekly Median Price for Center-Based Childcare ($)",
       x = "Study Year",
       y = NULL,
       color = "California Region")
```

**DVS-3: I show creativity in my visualizations**

-   I can use non-standard colors

```{r}
#| label: dvs-3-1

```

-   I can use annotations

```{r}
#| label: dvs-3-2

```

-   I can be creative...

```{r}
#| label: dvs-3-3

```

**DVS-4: I can calculate numerical summaries of variables.**

-   Example using `summarize()`

```{r}
#| label: dvs-4-summarize
## This code comes from Lab 3 Question 8
teacher_evals_clean |> 
  select(academic_degree, 
         seniority, 
         sex,
         teacher_id) |>
  group_by(sex, 
           academic_degree) |>
  summarise(med_seniority = median(seniority),
            num_teachers = n_distinct(teacher_id))
```

-   Example using `across()`

```{r}
#| label: dvs-4-across
## This code comes from Lab 3 Question 7, but R recommended that I use if_any() instead of across() because it was more up to date
teacher_evals_clean |> 
  filter(
    if_any(.cols = course_id:sex,
           .fns = ~ is.na(.x)
    )
  )
```

**DVS-5: I can find summaries of variables across multiple groups.**

-   Example 1

```{r}
#| label: dvs-5-1

```

-   Example 2

```{r}
#| label: dvs-5-2

```

**DVS-6: I can create tables which make my summaries clear to the reader.**

-   Example 1

```{r}
#| label: dvs-6-1

```

-   Example 2

```{r}
#| label: dvs-6-2

```

**DVS-7: I show creativity in my tables.**

-   Example 1

```{r}
#| label: dvs-7-1

```

-   Example 2

```{r}
#| label: dvs-7-2

```

## Program Efficiency

**PE-1: I can write concise code which does not repeat itself.**

-   using a single function call with multiple inputs (rather than multiple function calls)

```{r}
#| label: pe-1-one-call
## This code comes from Lab 3 Question 12
teacher_evals_clean |> 
  filter(sex == "female",
         academic_degree %in% c("dr", "ma")) |>
  group_by(teacher_id) |>
  summarise(mean_resp = mean(resp_share)) |>
  arrange(desc(mean_resp)) |>
  slice(c(1, n()))
```

-   `across()`

```{r}
#| label: pe-1-across
## This code comes from Lab 3 Question 7
teacher_evals_clean |> 
  filter(
    if_any(.cols = course_id:sex,
           .fns = ~ is.na(.x)
    )
  )
```

-   `map()` functions

```{r}
#| label: pe-1-map-1

```

**PE-2: I can write functions to reduce repetition in my code.**

-   Function that operates on vectors

```{r}
#| label: pe-2-1

```

-   Function that operates on data frames

```{r}
#| label: pe-2-2

```

**PE-3:I can use iteration to reduce repetition in my code.**

-   `across()`

```{r}
#| label: pe-3-across

```

-   `map()` function with **one** input (e.g., `map()`, `map_chr()`, `map_dbl()`, etc.)

```{r}
#| label: pe-3-map-1

```

-   `map()` function with **more than one** input (e.g., `map_2()` or `pmap()`)

```{r}
#| label: pe-3-map-2

```

**PE-4: I can use modern tools when carrying out my analysis.**

-   I can use functions which are not superseded or deprecated

```{r}
#| label: pe-4-1
## This code comes from Lab 3 Question 7. The function if_any is not superseded by any other functions, but the function across was
teacher_evals_clean |> 
  filter(
    if_any(.cols = course_id:sex,
           .fns = ~ is.na(.x)
    )
  )
```

-   I can connect a data wrangling pipeline into a `ggplot()`

```{r}
#| label: pe-4-2
## This code comes from Lab 4 Question 6
ca_childcare |>
  pivot_longer(cols = mc_infant:mc_preschool,
               names_to = "childcare_level",
               values_to = "median_cost") |>
  ggplot(mapping = aes(
    x = study_year,
    y = median_cost,
    colour = region
  )) +
  geom_point() +
  geom_smooth() +
  facet_wrap(.~ childcare_level,
             nrow = 1,
             labeller = labeller(childcare_level = 
                                   c("mc_infant" = "Infant",
                                     "mc_preschool" = "Preschool",
                                     "mc_toddler" = "Toddler"))) + 
  scale_y_continuous(limits = c(100, 500)) +
  scale_x_continuous(breaks = seq(2008, 2018, by = 2)) +
  theme(axis.text.x = element_text(size = 6)) +
  labs(title = "Weekly Median Price for Center-Based Childcare ($)",
       x = "Study Year",
       y = NULL,
       color = "California Region")
```

## Data Simulation & Statisical Models

**DSSM-1: I can simulate data from a *variety* of probability models.**

-   Example 1

```{r}
#| label: dsm-1-1

```

-   Example 2

```{r}
#| label: dsm-1-2

```

**DSSM-2: I can conduct common statistical analyses in R.**

-   Example 1

```{r}
#| label: dsm-2-1

```

-   Example 2

```{r}
#| label: dsm-2-2

```

## Revising My Thinking

<!-- How did you revise your thinking throughout the course? How did you revise your thinking on the code examples you have provided in your portfolio? -->

<!-- For the revisions included in your Portfolio, to help me understand the nature of your revisions, please denote somehow the feedback I provided you (e.g., boldface, italics, colored text) before your revisions. -->

## Extending My Thinking

<!-- How did you extended your thinking throughout the course? How did you extend your thinking on the code examples you have provided in your portfolio? -->

## Peer Support & Collaboration

<!-- Include an image or a description of feedback you gave that you are proud of (either in a peer review or in Discord). -->

<!-- Include a description of how you grew as a collaborator through the weekly pair programming activities.   -->
